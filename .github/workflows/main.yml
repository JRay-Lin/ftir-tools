name: Build Executables and Create Release for Windows and macOS

on:
    workflow_dispatch:
        inputs:
            version:
                description: "Version number (e.g., 1.0.0)"
                required: false
                default: "1.0.0"
    push:
        branches:
            - main

permissions:
    contents: write # Required for creating GitHub Release and uploading assets

jobs:
    build-windows:
        runs-on: windows-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.12" # Adjust to your Python version

            - name: Install uv
              run: pip install uv

            - name: Cache Python dependencies
              uses: actions/cache@v4
              with:
                  path: ~/.cache/uv
                  key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-uv-

            - name: Install dependencies with uv
              run: uv sync # Assuming pyproject.toml is used; if requirements.txt, change to uv pip install -r requirements.txt

            - name: Install PyInstaller and Pillow (for icon conversion)
              run: uv pip install pyinstaller pillow # If not in pyproject.toml, install additionally

            - name: Convert icon for Windows
              run: |
                  uv run python -c "
                  from PIL import Image
                  icon = Image.open('icon/icon.png')
                  icon.save('icon/icon.ico', format='ICO', sizes=[(256,256), (128,128), (64,64), (48,48), (32,32), (16,16)])
                  "
              shell: pwsh

            - name: Build executable for Windows
              run: |
                  VERSION=${{ github.event_name == 'workflow_dispatch' && (inputs.version || '1.0.0') || format('1.0.{0}', github.run_number) }}
                  uv run pyinstaller --onefile --icon=icon/icon.ico --name "FTIR Tools-v${VERSION}" main.py
              shell: pwsh

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: executable-windows-latest-v${{ github.event_name == 'workflow_dispatch' && (inputs.version || '1.0.0') || format('1.0.{0}', github.run_number) }}
                  path: dist/

    build-macos:
        runs-on: macos-14 # Supports Apple Silicon (ARM64)

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.12" # Adjust to your Python version

            - name: Install uv
              run: pip install uv

            - name: Cache Python dependencies
              uses: actions/cache@v4
              with:
                  path: ~/.cache/uv
                  key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-uv-

            - name: Install dependencies with uv
              run: uv sync # Assuming pyproject.toml is used; if requirements.txt, change to uv pip install -r requirements.txt

            - name: Install PyInstaller and Pillow (for icon conversion)
              run: uv pip install pyinstaller pillow # If not in pyproject.toml, install additionally

            - name: Convert icon for macOS
              run: |
                  mkdir icon/icon.iconset
                  sips -z 16 16     icon/icon.png --out icon/icon.iconset/icon_16x16.png
                  sips -z 32 32     icon/icon.png --out icon/icon.iconset/icon_16x16@2x.png
                  sips -z 32 32     icon/icon.png --out icon/icon.iconset/icon_32x32.png
                  sips -z 64 64     icon/icon.png --out icon/icon.iconset/icon_32x32@2x.png
                  sips -z 128 128   icon/icon.png --out icon/icon.iconset/icon_128x128.png
                  sips -z 256 256   icon/icon.png --out icon/icon.iconset/icon_128x128@2x.png
                  sips -z 256 256   icon/icon.png --out icon/icon.iconset/icon_256x256.png
                  sips -z 512 512   icon/icon.png --out icon/icon.iconset/icon_256x256@2x.png
                  sips -z 512 512   icon/icon.png --out icon/icon.iconset/icon_512x512.png
                  sips -z 1024 1024 icon/icon.png --out icon/icon.iconset/icon_512x512@2x.png
                  iconutil -c icns icon/icon.iconset -o icon/icon.icns
                  rm -rf icon/icon.iconset
              shell: bash

            - name: Build executable for macOS
              run: |
                  VERSION=${{ github.event_name == 'workflow_dispatch' && (inputs.version || '1.0.0') || format('1.0.{0}', github.run_number) }}
                  uv run pyinstaller --onefile --icon=icon/icon.icns --name "FTIR Tools-v${VERSION}" --windowed main.py
                  # If needed for .app bundle, additionally handle Info.plist
                  if [ -d "dist/FTIR Tools-v${VERSION}.app" ]; then
                    cp icon/icon.icns "dist/FTIR Tools-v${VERSION}.app/Contents/Resources/"
                    plutil -replace CFBundleIconFile -string icon.icns "dist/FTIR Tools-v${VERSION}.app/Contents/Info.plist"
                  fi
              shell: bash

            - name: Zip macOS .app bundle
              run: |
                  VERSION=${{ github.event_name == 'workflow_dispatch' && (inputs.version || '1.0.0') || format('1.0.{0}', github.run_number) }}
                  if [ -d "dist/FTIR Tools-v${VERSION}.app" ]; then
                    zip -r "dist/FTIR Tools-v${VERSION}.app.zip" "dist/FTIR Tools-v${VERSION}.app"
                  fi
              shell: bash

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: executable-macos-14-v${{ github.event_name == 'workflow_dispatch' && (inputs.version || '1.0.0') || format('1.0.{0}', github.run_number) }}
                  path: dist/

    release:
        needs: [build-windows, build-macos]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download Windows artifact
              uses: actions/download-artifact@v4
              with:
                  name: executable-windows-latest-v${{ steps.version.outputs.version }}
                  path: dist/windows

            - name: Download macOS artifact
              uses: actions/download-artifact@v4
              with:
                  name: executable-macos-14-v${{ steps.version.outputs.version }}
                  path: dist/macos

            - name: Set version
              id: version
              run: |
                  if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
                      echo "version=${{ inputs.version || '1.0.0' }}" >> $GITHUB_OUTPUT
                  else
                      echo "version=1.0.${{ github.run_number }}" >> $GITHUB_OUTPUT
                  fi

            - name: Create Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: v${{ steps.version.outputs.version }}
                  name: Release v${{ steps.version.outputs.version }}
                  draft: false
                  prerelease: false
                  files: |
                      dist/windows/FTIR Tools-v${{ steps.version.outputs.version }}.exe
                      dist/macos/FTIR Tools-v${{ steps.version.outputs.version }}.app.zip
